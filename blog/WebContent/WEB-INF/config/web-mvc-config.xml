<?xml version="1.0" encoding="UTF-8"?>

<!-- 	
	(c) 2018 Antonio Perdices.
	License: Public Domain.
	You can use this code freely and wisely in your applications.
-->
 
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">

	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven />
	
	<!-- Creates simple view controllers -->
	<mvc:view-controller path="/login" view-name="loginform" />
	<mvc:view-controller path="/tag/list" view-name="taglist" />
	<mvc:view-controller path="/folder/list" view-name="folderlist" />
	
	<!-- Create RSS View -->
	<bean id="rssNewsFeedView" class="es.isendev.blog.view.RssNewsFeedView" />
	
	<!-- View resolver chain -->
		
	<!-- BeanNameViewResolver added to resolv previously created rssNewsFeedView -->
	<!--
		Whenever a controller returns a logical view name, the BeanNameViewResolver
		will attempt to find a bean on the application context with the same name
		(or ID). If there's a match, then it interprets that bean as the mapped view.
		Otherwise, the other resolvers are given their shot at matching the view name.
	-->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
	
	<!-- Resolves view names to protected .jsp resources within the /WEB-INF/views directory -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
		<!-- Make blog configuration bean accesible from jsp views -->
		<property name="exposedContextBeanNames">
        	<list>
        		<value>simpleBloggerConfig</value>
        	</list>
    	</property>
	</bean>

    <!-- 
    	SimpleMappingExceptionResolver is a HandlerExceptionResolver interface implementation that allows
    	for mapping exception class names to view names, either for a set of given handlers or for all
    	handlers in the DispatcherServlet.
		Error views are analogous to error page JSPs, but can be used with any kind of exception including
		any checked one, with fine-granular mappings for specific handlers.		
		The default name of the exception attribute exposed to the Views is "exception".
	-->

    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="error"/>
	</bean>
	
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- Setting maximum upload size -->
		<property name="maxUploadSizePerFile" value="5242880"/>
	</bean>	

</beans>
