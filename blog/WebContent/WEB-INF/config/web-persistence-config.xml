<?xml version="1.0" encoding="UTF-8"?>

<!-- 	
	(c) 2018 Antonio Perdices.
	License: Public Domain.
	You can use this code freely and wisely in your applications.
-->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!--
		Instructs Spring to perform declarative transaction management on annotated classes.
	-->	
	<tx:annotation-driven />
	
	<!--
		Drives transactions using local JPA APIs
	-->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!--
		Creates a EntityManagerFactory for use with the EclipseLink JPA provider.
	-->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		
		<property name="dataSource" ref="dataSource" />
		
		<!--
			If necessary, we can move default persistence.xml from /META-INF/ to another location
			e.g. /WEB-INF/config/
		 -->
		<property name="persistenceXmlLocation" value="/WEB-INF/config/persistence.xml" /> 
		
		<property name="jpaVendorAdapter">

			<!--
				Declare the Eclipse JPA Vendor Adapter and configure its database dialect
			-->
			<bean class="org.springframework.orm.jpa.vendor.EclipseLinkJpaVendorAdapter">
				<property name="databasePlatform" value="org.eclipse.persistence.platform.database.MySQLPlatform" />				
   				<property name="showSql" value="true" />
			</bean>

		</property>
		
		<property name="jpaPropertyMap">
			<map>
				<!-- 
					Weaving is a technique of manipulating the byte-code of compiled Java classes.
					EclipseLink uses weaving to enhance both JPA entities and Plain Old Java Object (POJO)
					classes for such things as lazy loading, change tracking, fetch groups,
					and internal optimizations.
				-->
				<entry key="eclipselink.weaving" value="static"/>
				<entry key="eclipselink.target-database" value="MySQL"/>
				<!--
					Custom EclipseLink SessionLog to support Log4j.
					Log4j "eclipselink" appender must be configured correctly to work properly.
				-->
				<entry key="eclipselink.logging.logger" value="es.isendev.blog.util.Log4jSessionLog"/>
		    </map>
		</property>
	
	</bean>
	
	<!-- 
		BeanPostProcessor that processes PersistenceUnit and PersistenceContext annotations, for injection
		of the corresponding JPA resources EntityManagerFactory and EntityManager. Any such annotated fields
		or methods in any Spring-managed object will automatically be injected. 
	 -->
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

	<!-- HikariCP high-performance JDBC connection pool -->

	<!-- Configuration -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">

	    <property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
		<property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/dblog?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Europe/Madrid" />
		<!-- <property name="jdbcUrl" value="jdbc:mysql://127.0.0.1:3306/dblog?useUnicode=true&amp;useJDBCCompliantTimezoneShift=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=Europe/Madrid" /> -->

	    <property name="poolName" value="springHikariCP" />
	    <property name="maximumPoolSize" value="10" />
	    <property name="idleTimeout" value="60" />
	
	    <property name="dataSourceProperties">
	        <props>
	            <prop key="user">blog</prop>
	            <prop key="password">blog</prop>
	        </props>
	    </property>

	</bean>
	
	<!-- DataSource -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
	    <constructor-arg ref="hikariConfig" />
	</bean>

</beans>